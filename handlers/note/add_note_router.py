from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from create_bot import bot
from data_base.dao import add_note, get_notes_by_user, get_subjects_by_user
from keyboards.note_kb import main_note_kb, add_note_check, generate_subject_keyboard
from keyboards.other_kb import stop_fsm
from utils.utils import get_content_info, send_message_user

add_note_router = Router()

subject_id = None


class AddNoteStates(StatesGroup):
    content = State()  # –û–∂–∏–¥–∞–µ–º –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    choose_subject = State()  # –§–∏–Ω–∞–ª—å–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞


@add_note_router.message(F.text == 'üìù –û—Ç—á–µ—Ç—ã')
async def start_note(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç, –≤—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                         reply_markup=main_note_kb())


@add_note_router.message(F.text == 'üìù –°–∫–∏–Ω—É—Ç—å –æ—Ç—á–µ—Ç')
async def start_add_note(message: Message, state: FSMContext):
    await state.clear()
    global subject_id
    subject_id = None
    all_subjects = await get_subjects_by_user(user_id=message.from_user.id)
    if all_subjects:
        await message.answer('–ü–æ –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –æ—Ç—á–µ—Ç?', reply_markup=generate_subject_keyboard(all_subjects))

    else:
        await state.clear()
        await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –∏—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å', reply_markup=main_note_kb())

    # await message.answer('–°–∫–∏–¥—ã–≤–∞–π –¥–æ–∫—É–º–µ–Ω—Ç',reply_markup=stop_fsm())
    # await state.set_state(AddNoteStates.choose_subject)


@add_note_router.callback_query(F.data.startswith('subject_'))
async def add_subject_to_note(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.clear()
    subject = call.data.replace('subject_', '')
    global subject_id
    subject_id = subject
    await call.message.answer('–û—Ç–ø—Ä–∞–≤—Ç—å–µ —Ñ–∞–π–ª')
    await state.set_state(AddNoteStates.content)


@add_note_router.message(AddNoteStates.content)
async def handle_user_note_message(message: Message, state: FSMContext):
    content_info = get_content_info(message)
    if content_info.get('content_type'):
        global subject_id
        subject = subject_id
        await state.update_data(**content_info)

        note = await state.get_data()
        await add_note(user_id=message.from_user.id, subject_id=subject, content_type=note.get('content_type'),
                       content_text=note.get('content_text'), file_id=note.get('file_id'))
        await message.answer('–û—Ç—á–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=main_note_kb())

        await state.clear()
    else:
        await message.answer(
            '–≠—Ç–æ —á—Ç–æ?'
        )
        await state.set_state(AddNoteStates.content)


""" @add_note_router.message(AddNoteStates.check_state, F.text == '‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ')
async def confirm_add_note(message: Message, state: FSMContext):
    note = await state.get_data()
    await add_note(user_id=message.from_user.id, content_type=note.get('content_type'),
                   content_text=note.get('content_text'), file_id=note.get('file_id'))
    await message.answer('–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', reply_markup=main_note_kb())
    await state.clear()


@add_note_router.message(AddNoteStates.check_state, F.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
async def cancel_add_note(message: Message, state: FSMContext):
    await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=main_note_kb())
    await state.clear()
 """
