from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from create_bot import bot
from data_base.dao import get_notes_by_user, get_subjects_by_user, get_subject_name_by_id
from keyboards.note_kb import main_note_kb, find_note_kb, generate_date_keyboard, generate_type_content_keyboard, generate_subject_keyboard_withId, generate_subject_keyboard_withName
from utils.utils import send_many_notes
from create_bot import logger


find_note_router = Router()


class FindNoteStates(StatesGroup):
    text = State()
    show_notes = State()  # –û–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–∞


@find_note_router.message(F.text == 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤')
async def start_views_noti(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–í—ã–±–µ—Ä–∏ –∫–∞–∫–∏–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å', reply_markup=find_note_kb())


@find_note_router.message(F.text == 'üìÑ –í—Å–µ –æ—Ç—á–µ—Ç—ã')
async def all_views_noti(message: Message, state: FSMContext):
    await state.clear()
    all_notes = await get_notes_by_user(user_id=message.from_user.id)
    if all_notes:
        await send_many_notes(all_notes, bot, message.from_user.id)
        await message.answer(f'–í—Å–µ –≤–∞—à–∏ {len(all_notes)} –æ—Ç—á–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!', reply_markup=main_note_kb())
    else:
        await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞!', reply_markup=main_note_kb())


@find_note_router.message(F.text == 'üîç –ü–æ –ø—Ä–µ–¥–º–µ—Ç—É')
async def subject_views_noti(message: Message, state: FSMContext):
    await state.clear()
    global subject_id
    subject_id = None
    all_subjects = await get_subjects_by_user(user_id=message.from_user.id)
    if all_subjects:
        await state.set_state(FindNoteStates.show_notes)
        await message.answer('–ü–æ –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –æ—Ç—á–µ—Ç?', reply_markup=generate_subject_keyboard_withId(all_subjects))

    else:
        await state.clear()
        await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –∏—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å', reply_markup=main_note_kb())


@find_note_router.callback_query(FindNoteStates.show_notes, F.data.startswith('subject_'))
async def find_note_to_date(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.clear()
    subject_id = int(call.data.replace('subject_', ''))
    all_notes = await get_notes_by_user(user_id=call.from_user.id, subject_id=subject_id)
    subject_name = await get_subject_name_by_id(subject_id)
    await send_many_notes(all_notes, bot, call.from_user.id)
    await call.message.answer(f'–í—Å–µ –≤–∞—à–∏ –æ—Ç—á–µ—Ç—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!',
                              reply_markup=main_note_kb())

# TODO: –£–î–ê–õ–ò–¢–¨


@find_note_router.message(F.text == 'üìù –ü–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
async def content_type_views_noti(message: Message, state: FSMContext):
    await state.clear()
    all_notes = await get_notes_by_user(user_id=message.from_user.id)
    if all_notes:
        await message.answer('–ö–∞–∫–æ–π —Ç–∏–ø –∑–∞–º–µ—Ç–æ–∫ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                             reply_markup=generate_type_content_keyboard(all_notes))
    else:
        await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏!', reply_markup=main_note_kb())


@find_note_router.callback_query(F.data.startswith('content_type_note_'))
async def find_note_to_content_type(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.clear()
    content_type = call.data.replace('content_type_note_', '')
    all_notes = await get_notes_by_user(user_id=call.from_user.id, content_type=content_type)
    await send_many_notes(all_notes, bot, call.from_user.id)
    await call.message.answer(f'–í—Å–µ –≤–∞—à–∏ {len(all_notes)} —Å —Ç–∏–ø–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ {content_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!',
                              reply_markup=main_note_kb())

# TODO: —É–¥–∞–ª–∏—Ç—å
""" @find_note_router.message(F.text == 'üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É')
async def text_views_noti(message: Message, state: FSMContext):
    await state.clear()
    all_notes = await get_notes_by_user(user_id=message.from_user.id)
    if all_notes:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è –Ω–∞—á–Ω—É –ø–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º. –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º '
                             '—Å–æ–¥–µ—Ä–∂–∏–º–æ–º –∑–∞–º–µ—Ç–∫–∏ –±—É–¥–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å, —Ç–æ —è –æ—Ç–æ–±—Ä–∞–∂—É —ç—Ç–∏ –∑–∞–º–µ—Ç–∫–∏')
        await state.set_state(FindNoteStates.text)
    else:
        await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏!', reply_markup=main_note_kb()) """

# TODO —É–¥–∞–ª–∏—Ç—å


@find_note_router.message(F.text, FindNoteStates.text)
async def text_noti_process(message: Message, state: FSMContext):
    text_search = message.text.strip()
    all_notes = await get_notes_by_user(user_id=message.from_user.id, text_search=text_search)
    await state.clear()
    if all_notes:
        await send_many_notes(all_notes, bot, message.from_user.id)
        await message.answer(f'C –ø–æ–∏—Å–∫–æ–≤–æ–π —Ñ—Ä–∞–∑–æ–π {text_search} –±—ã–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(all_notes)} –∑–∞–º–µ—Ç–æ–∫!',
                             reply_markup=main_note_kb())
    else:
        await message.answer(f'–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∞–ª–∞ –±—ã –≤ —Ç–µ–∫—Å—Ç–µ {text_search}!',
                             reply_markup=main_note_kb())
